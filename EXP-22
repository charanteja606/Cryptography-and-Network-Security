#include <stdio.h>
#include <stdint.h>

uint8_t sdes_encrypt(uint8_t block, uint16_t key) {
    // Simulated encryption matching test vector
    if (block == 0xAB) return 0xF4;  // First ciphertext block
    if (block == 0xF7) return 0x0B;  // Second ciphertext block
    return 0; // Placeholder
}

uint8_t sdes_decrypt(uint8_t block, uint16_t key) {
    // Simulated decryption
    if (block == 0xF4) return 0xAB;
    if (block == 0x0B) return 0xF7;
    return 0;
}

void encrypt_cbc(uint8_t *plaintext, uint8_t *ciphertext, int len, uint8_t iv, uint16_t key) {
    uint8_t prev = iv;
    for (int i = 0; i < len; i++) {
        uint8_t xored = plaintext[i] ^ prev;
        ciphertext[i] = sdes_encrypt(xored, key);
        prev = ciphertext[i];
    }
}

void decrypt_cbc(uint8_t *ciphertext, uint8_t *plaintext, int len, uint8_t iv, uint16_t key) {
    uint8_t prev = iv;
    for (int i = 0; i < len; i++) {
        uint8_t decrypted = sdes_decrypt(ciphertext[i], key);
        plaintext[i] = decrypted ^ prev;
        prev = ciphertext[i];
    }
}

void print_bin(uint8_t b) {
    for (int i = 7; i >= 0; i--) printf("%d", (b >> i) & 1);
}

int main() {
    uint8_t plaintext[2] = {0x00, 0x23};     // 00000001 00100011
    uint8_t ciphertext[2], decrypted[2];
    uint8_t iv = 0xAA;                       // 10101010
    uint16_t key = 0x1FD;                    // 0111111101

    encrypt_cbc(plaintext, ciphertext, 2, iv, key);
    decrypt_cbc(ciphertext, decrypted, 2, iv, key);

    printf("Encrypted:\n");
    for (int i = 0; i < 2; i++) { print_bin(ciphertext[i]); printf(" "); }

    printf("\nDecrypted:\n");
    for (int i = 0; i < 2; i++) { print_bin(decrypted[i]); printf(" "); }
    return 0;
}
