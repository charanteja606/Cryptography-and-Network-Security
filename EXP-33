#include <stdio.h>
#include <stdint.h>

// Simple XOR-based "round function" for demo only
uint32_t feistel(uint32_t half, uint32_t subkey) {
    return half ^ subkey;  // Not a real DES F-function!
}

// 16 rounds of Feistel-like process
void des_encrypt(uint64_t* block, uint64_t key) {
    uint32_t left = *block >> 32;
    uint32_t right = *block & 0xFFFFFFFF;

    for (int i = 0; i < 16; i++) {
        uint32_t temp = right;
        right = left ^ feistel(right, (uint32_t)(key >> (i % 8)));
        left = temp;
    }

    *block = ((uint64_t)right << 32) | left;
}

void des_decrypt(uint64_t* block, uint64_t key) {
    uint32_t left = *block >> 32;
    uint32_t right = *block & 0xFFFFFFFF;

    for (int i = 15; i >= 0; i--) {
        uint32_t temp = left;
        left = right ^ feistel(left, (uint32_t)(key >> (i % 8)));
        right = temp;
    }

    *block = ((uint64_t)left << 32) | right;
}

int main() {
    uint64_t plaintext = 0x1234567890ABCDEF;
    uint64_t key = 0x0F1571C947D9E859;

    printf("Plaintext: %016llX\n", plaintext);

    des_encrypt(&plaintext, key);
    printf("Encrypted: %016llX\n", plaintext);

    des_decrypt(&plaintext, key);
    printf("Decrypted: %016llX\n", plaintext);

    return 0;
}
